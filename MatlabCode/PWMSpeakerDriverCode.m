%% Create PWM Waveform from Arbitrary Waveform

clc
sim_freq = 3e9; % 3 GHz


fs = 256000000;
Ts = 1/fs;
dur = 0.0001; %s
vv_length = fs*dur+1;

pulse_length = 256;
signal_freq = 1*10^6; % 1 Mhz
update_freq = pulse_length*signal_freq;
tt_samp = (1/signal_freq)*[0:signal_freq*dur];

sig = [0, 256, 64*ones(1,length(tt_samp)-2)];

adj_sig = (sig - min(sig)); % Shift signal up to 0
adj_sig = adj_sig*256/max(adj_sig); % Bound between 0 and 256
adj_sig = round(adj_sig); % Make discrete steps

adj_sig_max = max(adj_sig)
adj_sig_min = min(adj_sig)


%% Create vv vector
test = [ones(1,adj_sig(100)) zeros(1,256-adj_sig(100))];
vv = [];
for i = 1:length(tt_samp)
    disp(i)
    vv = [vv ones(1,adj_sig(i)) zeros(1,256-adj_sig(i))];
end

%% Try linear ramp
tt_samp = [1:256];
adj_sig = tt_samp;
vv = zeros(1,655360);
for j = 1:10
    disp(j)
    for i = 1:length(tt_samp)
        disp(i)
        vv(((j-1)*65536+1)+((i-1)*256+1):((j-1)*65536+1)+((i-1)*256+1)+255) = [ones(1,adj_sig(i)) zeros(1,256-adj_sig(i))];
    end
end

%% Try basic input square wave
clc
sim_freq = 3e9;

fs = 256000;
Ts = 1/fs;
dur = 0.01; %s
vv_length = fs*dur+1;

tt = (1/fs)*[0:fs*dur];
vv = (square(2*pi*1000*tt-pi/4)+1)/2;



%%
figure;
area(tt,vv);


%%
%vv = vv(:,1:vv_length);
tt = Ts*[0:length(vv)-1];
    


%% Create PWM Waveform
clc
fs = 10000000;
Ts = 1/fs;
dur = 0.02; %s
tt = Ts*[0:fs*dur];

f0 = 1000;
vv = square(2*pi*f0*tt-pi/4);

%% Plot Input Waveform
figure;
hold on
tt = Ts*[0:length(vv)-1];
area(tt, vv);
tt_adj = (1/signal_freq)*[0:length(adj_sig)-1];
plot(tt_adj, adj_sig/256);


%% Clear Autogenerated Variables
clear dur
clear f
clear f0
clear fs
clear n
clear t
clear tout
clear Ts
clear tt
clear vv
clear adj_sig
clear adj_sig_max
clear adj_sig_min
clear i
clear j
clear pulse_length
clear sig
clear signal_freq
clear sim_freq
clear start
clear test
clear tt_adj
clear tt_samp
clear update_freq


clear Sq500fft
clear Sq500Pow
clear Sq1000fft
clear Sq1000Pow
clear Sq5000fft
clear Sq5000Pow
clear Sin20000fft
clear Sin20000LP
clear Sin20000Pow


clear Power
clear Voltage

%%
%set_param('PWMSpeakerDriver', 'StopTime', num2str(length(vv)-2));
clc;
clear simout;
a = sim('PWMSpeakerDriver', 'SimulationMode','normal');


%% Plot

plot(a.simout1);


%% Run Simulation and plot


% Reuse figure if it exists, else create new figure
try
    figure(speaker_driver)
catch
    speaker_driver=figure('Name', 'speaker_driver');
end

% Generate simulation results if they don't exist
if(~exist('simlog_PWMSpeakerDriver','var'))
    sim('PWMSpeakerDriver')
end

% Get simulation results
temp_vin = simlog_ssc_opamp_differentiator.AC_Voltage.v.series;
temp_vout = simlog_ssc_opamp_differentiator.Op_Amp.out.v.series;

% Plot results
plot(temp_vin.time,temp_vin.values,'LineWidth',1);
hold on
plot(temp_vout.time,temp_vout.values,'LineWidth',1);
hold off
grid on
title('Differentiator Circuit Voltages');
ylabel('Voltage (V)');
xlabel('Time (s)');
legend({'Input','Output'},'Location','Best');

% Remove temporary variables
clear temp_vin temp_vout