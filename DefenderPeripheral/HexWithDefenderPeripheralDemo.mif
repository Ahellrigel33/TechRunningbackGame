-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : B83F;  -- 	LOADI	clear
           001 : 98E0;  --     OUT    	HexPeriph
           002 : B802;  --     LOADI	2
           003 : 8053;  -- 	CALL	DelayAC
           004 : 902F;  -- 	IN		defGen
           005 : 1052;  -- 	STORE   defense
           006 : 0840;  -- 	LOAD	writeHex
           007 : 5047;  -- 	OR		Hex5
           008 : 5052;  -- 	OR		defense
           009 : 98E0;  -- 	OUT		HexPeriph
           00A : B802;  -- 	LOADI	2
           00B : 8053;  -- 	CALL	DelayAC
           00C : 902F;  -- 	IN      defGen
           00D : 1052;  -- 	STORE   defense
           00E : 0840;  -- 	LOAD	writeHex
           00F : 5046;  -- 	OR		Hex4
           010 : 5052;  -- 	OR		defense
           011 : 98E0;  -- 	OUT		HexPeriph
           012 : B802;  -- 	LOADI	2
           013 : 8053;  -- 	CALL	DelayAC
           014 : 902F;  -- 	IN   	defGen
           015 : 1052;  -- 	STORE   defense
           016 : 0840;  -- 	LOAD	writeHex
           017 : 5045;  -- 	OR		Hex3
           018 : 5052;  -- 	OR		defense
           019 : 98E0;  -- 	OUT		HexPeriph
           01A : B802;  -- 	LOADI	2
           01B : 8053;  -- 	CALL	DelayAC
           01C : 902F;  -- 	IN  	defGen
           01D : 1052;  -- 	STORE 	defense
           01E : 0840;  -- 	LOAD	writeHex
           01F : 5044;  -- 	OR		Hex2
           020 : 5052;  -- 	OR		defense
           021 : 98E0;  -- 	OUT		HexPeriph
           022 : B802;  -- 	LOADI	2
           023 : 8053;  -- 	CALL	DelayAC
           024 : 902F;  -- 	IN 		defGen
           025 : 1052;  -- 	STORE 	defense
           026 : 0840;  -- 	LOAD	writeHex	
           027 : 5043;  -- 	OR		Hex1
           028 : 5052;  -- 	OR		defense
           029 : 98E0;  -- 	OUT		HexPeriph
           02A : B802;  -- 	LOADI	2
           02B : 8053;  -- 	CALL	DelayAC
           02C : 902F;  -- 	IN 		defGen
           02D : 1052;  -- 	STORE	defense
           02E : 0840;  -- 	LOAD	writeHex
           02F : 5042;  -- 	OR		Hex0
           030 : 5052;  -- 	OR		defense
           031 : 98E0;  -- 	OUT		HexPeriph
           032 : B802;  -- 	LOADI	2
           033 : 8053;  -- 	CALL	DelayAC
           034 : 0841;  -- 	LOAD	writePlayer
           035 : 5051;  -- 	OR		rightSide
           036 : 98E0;  -- 	OUT		HexPeriph	
           037 : B802;  -- 	LOADI	2
           038 : 8053;  -- 	CALL	DelayAC
           039 : 0841;  -- 	LOAD	writePlayer
           03A : 5050;  -- 	OR		midSide
           03B : 98E0;  -- 	OUT		HexPeriph	
           03C : B802;  -- 	LOADI	2
           03D : 8053;  -- 	CALL	DelayAC
           03E : 2800;  -- 	JUMP   	TEST
           03F : 0000;  -- clear:			DW &H0000
           040 : 1000;  -- writeHex:		DW &H1000
           041 : 2000;  -- writePlayer:	DW &H2000
           042 : 0000;  -- Hex0:	DW &B0000000000000000
           043 : 0200;  -- Hex1:	DW &B0000001000000000
           044 : 0400;  -- Hex2:	DW &B0000010000000000
           045 : 0600;  -- Hex3:	DW &B0000011000000000
           046 : 0800;  -- Hex4:	DW &B0000100000000000
           047 : 0A00;  -- Hex5:	DW &B0000101000000000
           048 : 0000;  -- noDef:      DW &B0000000
           049 : 0008;  -- leftDef:	DW &B0001000
           04A : 0048;  -- leftTwo:    DW &B1001000
           04B : 0040;  -- midDef:		DW &B1000000
           04C : 0009;  -- sidesDef:   DW &B0001001
           04D : 0001;  -- rightDef:	DW &B0000001
           04E : 0041;  -- rightTwo:   DW &B1000001
           04F : 0800;  -- leftSide:		DW &B0000100000000000
           050 : 0400;  -- midSide:		DW &B0000010000000000
           051 : 0200;  -- rightSide:		DW &B0000001000000000
           052 : 0000;  -- Defense:        DW  &B0000000
           053 : 1059;  -- 	STORE  DelayTime   ; Save the desired delay
           054 : 9802;  -- 	OUT    Timer       ; Reset the timer
           055 : 9002;  -- 	IN     Timer       ; Get the current timer value
           056 : 2059;  -- 	SUB    DelayTime
           057 : 3055;  -- 	JNEG   WaitingLoop ; Repeat until timer = delay value
           058 : 8800;  -- 	RETURN
           059 : 0000;  -- DelayTime: DW 0
           05A : 385D;  -- 	JPOS   Abs_r
           05B : 5958;  -- 	XOR    NegOne       ; Flip all bits
           05C : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           05D : 8800;  -- 	RETURN
           05E : 08BE;  -- 	LOAD   AtanY
           05F : 805A;  -- 	CALL   Abs          ; abs(y)
           060 : 10C0;  -- 	STORE  AtanT
           061 : 08BD;  -- 	LOAD   AtanX        ; abs(x)
           062 : 805A;  -- 	CALL   Abs
           063 : 20C0;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           064 : 306F;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           065 : 08BD;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           066 : 306C;  -- 	JNEG   A2_R3
           067 : 807E;  -- 	CALL   A2_calc      ; Octants 1, 8
           068 : 306A;  -- 	JNEG   A2_R1n
           069 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           06A : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           06B : 8800;  -- 	RETURN
           06C : 807E;  -- 	CALL   A2_calc      ; Octants 4, 5            
           06D : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           06E : 8800;  -- 	RETURN
           06F : 08BE;  -- 	LOAD   AtanY        ; Swap input arguments
           070 : 10C0;  -- 	STORE  AtanT
           071 : 08BD;  -- 	LOAD   AtanX
           072 : 10BE;  -- 	STORE  AtanY
           073 : 08C0;  -- 	LOAD   AtanT
           074 : 10BD;  -- 	STORE  AtanX
           075 : 387A;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           076 : 807E;  -- 	CALL   A2_calc      ; else octants 6, 7
           077 : 805B;  -- 	CALL   Neg          ; Negatge the number
           078 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           079 : 8800;  -- 	RETURN
           07A : 807E;  -- 	CALL   A2_calc      ; Octants 2, 3
           07B : 805B;  -- 	CALL   Neg          ; negate the angle
           07C : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           07D : 8800;  -- 	RETURN
           07E : 08BE;  -- 	LOAD   AtanY
           07F : 111D;  -- 	STORE  d16sN        ; Y in numerator
           080 : 08BD;  -- 	LOAD   AtanX
           081 : 111E;  -- 	STORE  d16sD        ; X in denominator
           082 : 80AA;  -- 	CALL   A2_div       ; divide
           083 : 0923;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           084 : 10BF;  -- 	STORE  AtanRatio
           085 : 10E6;  -- 	STORE  m16sA
           086 : 10E7;  -- 	STORE  m16sB
           087 : 80A1;  -- 	CALL   A2_mult      ; X^2
           088 : 10E6;  -- 	STORE  m16sA
           089 : 08C1;  -- 	LOAD   A2c
           08A : 10E7;  -- 	STORE  m16sB
           08B : 80A1;  -- 	CALL   A2_mult
           08C : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           08D : 111E;  -- 	STORE  d16sD
           08E : 08BF;  -- 	LOAD   AtanRatio
           08F : 111D;  -- 	STORE  d16sN        ; Ratio in numerator
           090 : 80AA;  -- 	CALL   A2_div       ; divide
           091 : 0923;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           092 : 10E6;  -- 	STORE  m16sA        ; <= result in radians
           093 : 08C2;  -- 	LOAD   A2cd         ; degree conversion factor
           094 : 10E7;  -- 	STORE  m16sB
           095 : 80A1;  -- 	CALL   A2_mult      ; convert to degrees
           096 : 10C0;  -- 	STORE  AtanT
           097 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           098 : 4959;  -- 	AND    One
           099 : 409E;  -- 	JZERO  A2_rdwn      ; round down
           09A : 08C0;  -- 	LOAD   AtanT
           09B : 6018;  -- 	SHIFT  -8
           09C : 6801;  -- 	ADDI   1            ; round up
           09D : 8800;  -- 	RETURN
           09E : 08C0;  -- 	LOAD   AtanT
           09F : 6018;  -- 	SHIFT  -8           ; round down
           0A0 : 8800;  -- 	RETURN
           0A1 : 80C3;  -- 	CALL   Mult16s
           0A2 : 08EB;  -- 	LOAD   mres16sH
           0A3 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           0A4 : 10EB;  -- 	STORE  mres16sH
           0A5 : 08EA;  -- 	LOAD   mres16sL
           0A6 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           0A7 : 4963;  -- 	AND    LoByte
           0A8 : 50EB;  -- 	OR     mres16sH     ; combine high and low words of result
           0A9 : 8800;  -- 	RETURN
           0AA : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           0AB : 10C0;  -- 	STORE  AtanT
           0AC : 08C0;  -- 	LOAD   AtanT
           0AD : 6FFF;  -- 	ADDI   -1
           0AE : 38B1;  -- 	JPOS   A2_DN        ; not done; continue shifting
           0AF : 80EC;  -- 	CALL   Div16s       ; do the standard division
           0B0 : 8800;  -- 	RETURN
           0B1 : 10C0;  -- 	STORE  AtanT
           0B2 : 091D;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           0B3 : 6001;  -- 	SHIFT  1
           0B4 : 591D;  -- 	XOR    d16sN        ; if the sign changed,
           0B5 : 30B9;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           0B6 : 591D;  -- 	XOR    d16sN        ; get back shifted version
           0B7 : 111D;  -- 	STORE  d16sN
           0B8 : 28AC;  -- 	JUMP   A2_DL
           0B9 : 091E;  -- 	LOAD   d16sD
           0BA : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           0BB : 111E;  -- 	STORE  d16sD
           0BC : 28AC;  -- 	JUMP   A2_DL
           0BD : 0000;  -- AtanX:      DW 0
           0BE : 0000;  -- AtanY:      DW 0
           0BF : 0000;  -- AtanRatio:  DW 0        ; =y/x
           0C0 : 0000;  -- AtanT:      DW 0        ; temporary value
           0C1 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           0C2 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           0C3 : B800;  -- 	LOADI  0
           0C4 : 10E8;  -- 	STORE  m16sc        ; clear carry
           0C5 : 10EB;  -- 	STORE  mres16sH     ; clear result
           0C6 : B810;  -- 	LOADI  16           ; load 16 to counter
           0C7 : 10E9;  -- 	STORE  mcnt16s      
           0C8 : 08E8;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           0C9 : 40CD;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           0CA : 08EB;  -- 	LOAD   mres16sH     ; if a carry, 
           0CB : 18E6;  -- 	ADD    m16sA        ;  add multiplicand to result H
           0CC : 10EB;  -- 	STORE  mres16sH
           0CD : 08E7;  -- 	LOAD   m16sB
           0CE : 4959;  -- 	AND    One          ; check bit 0 of multiplier
           0CF : 10E8;  -- 	STORE  m16sc        ; save as next carry
           0D0 : 40D4;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           0D1 : 08EB;  -- 	LOAD   mres16sH     ; if bit 0 set,
           0D2 : 20E6;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           0D3 : 10EB;  -- 	STORE  mres16sH
           0D4 : 08E7;  -- 	LOAD   m16sB
           0D5 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           0D6 : 48E5;  -- 	AND    c7FFF        ; clear msb
           0D7 : 10E7;  -- 	STORE  m16sB
           0D8 : 08EB;  -- 	LOAD   mres16sH     ; load result H
           0D9 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           0DA : 50E7;  -- 	OR     m16sB
           0DB : 10E7;  -- 	STORE  m16sB        ; result L now includes carry out from H
           0DC : 08EB;  -- 	LOAD   mres16sH
           0DD : 6011;  -- 	SHIFT  -1
           0DE : 10EB;  -- 	STORE  mres16sH     ; shift result H >>1
           0DF : 08E9;  -- 	LOAD   mcnt16s
           0E0 : 6FFF;  -- 	ADDI   -1           ; check counter
           0E1 : 38C7;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           0E2 : 08E7;  -- 	LOAD   m16sB
           0E3 : 10EA;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           0E4 : 8800;  -- 	RETURN              ; Done
           0E5 : 7FFF;  -- c7FFF: DW &H7FFF
           0E6 : 0000;  -- m16sA: DW 0 ; multiplicand
           0E7 : 0000;  -- m16sB: DW 0 ; multipler
           0E8 : 0000;  -- m16sc: DW 0 ; carry
           0E9 : 0000;  -- mcnt16s: DW 0 ; counter
           0EA : 0000;  -- mres16sL: DW 0 ; result low
           0EB : 0000;  -- mres16sH: DW 0 ; result high
           0EC : B800;  -- 	LOADI  0
           0ED : 1124;  -- 	STORE  dres16sR     ; clear remainder result
           0EE : 1121;  -- 	STORE  d16sC1       ; clear carry
           0EF : 091D;  -- 	LOAD   d16sN
           0F0 : 591E;  -- 	XOR    d16sD
           0F1 : 111F;  -- 	STORE  d16sS        ; sign determination = N XOR D
           0F2 : B811;  -- 	LOADI  17
           0F3 : 1120;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           0F4 : 091E;  -- 	LOAD   d16sD
           0F5 : 805A;  -- 	CALL   Abs          ; take absolute value of denominator
           0F6 : 111E;  -- 	STORE  d16sD
           0F7 : 091D;  -- 	LOAD   d16sN
           0F8 : 805A;  -- 	CALL   Abs          ; take absolute value of numerator
           0F9 : 111D;  -- 	STORE  d16sN
           0FA : 091D;  -- 	LOAD   d16sN
           0FB : 601F;  -- 	SHIFT  -15          ; get msb
           0FC : 4959;  -- 	AND    One          ; only msb (because shift is arithmetic)
           0FD : 1122;  -- 	STORE  d16sC2       ; store as carry
           0FE : 091D;  -- 	LOAD   d16sN
           0FF : 6001;  -- 	SHIFT  1            ; shift <<1
           100 : 5121;  -- 	OR     d16sC1       ; with carry
           101 : 111D;  -- 	STORE  d16sN
           102 : 0920;  -- 	LOAD   d16sT
           103 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           104 : 4114;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           105 : 1120;  -- 	STORE  d16sT
           106 : 0924;  -- 	LOAD   dres16sR
           107 : 6001;  -- 	SHIFT  1            ; shift remainder
           108 : 5122;  -- 	OR     d16sC2       ; with carry from other shift
           109 : 211E;  -- 	SUB    d16sD        ; subtract denominator from remainder
           10A : 310F;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           10B : 1124;  -- 	STORE  dres16sR
           10C : B801;  -- 	LOADI  1
           10D : 1121;  -- 	STORE  d16sC1       ; set carry
           10E : 28FA;  -- 	JUMP   Div16s_loop
           10F : 191E;  -- 	ADD    d16sD        ; add denominator back in
           110 : 1124;  -- 	STORE  dres16sR
           111 : B800;  -- 	LOADI  0
           112 : 1121;  -- 	STORE  d16sC1       ; clear carry
           113 : 28FA;  -- 	JUMP   Div16s_loop
           114 : 091D;  -- 	LOAD   d16sN
           115 : 1123;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           116 : 091F;  -- 	LOAD   d16sS        ; check the sign indicator
           117 : 3119;  -- 	JNEG   Div16s_neg
           118 : 8800;  -- 	RETURN
           119 : 0923;  -- 	LOAD   dres16sQ     ; need to negate the result
           11A : 805B;  -- 	CALL   Neg
           11B : 1123;  -- 	STORE  dres16sQ
           11C : 8800;  -- 	RETURN	
           11D : 0000;  -- d16sN: DW 0 ; numerator
           11E : 0000;  -- d16sD: DW 0 ; denominator
           11F : 0000;  -- d16sS: DW 0 ; sign value
           120 : 0000;  -- d16sT: DW 0 ; temp counter
           121 : 0000;  -- d16sC1: DW 0 ; carry value
           122 : 0000;  -- d16sC2: DW 0 ; carry value
           123 : 0000;  -- dres16sQ: DW 0 ; quotient result
           124 : 0000;  -- dres16sR: DW 0 ; remainder result
           125 : 094F;  -- 	LOAD   L2A
           126 : 805A;  -- 	CALL   Abs
           127 : 1151;  -- 	STORE  L2T1
           128 : 0950;  -- 	LOAD   L2B
           129 : 805A;  -- 	CALL   Abs
           12A : 2151;  -- 	SUB    L2T1
           12B : 3147;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           12C : 1951;  -- 	ADD    L2T1
           12D : 10E6;  -- 	STORE  m16sa
           12E : B8F6;  -- 	LOADI  246       ; max * 246
           12F : 10E7;  -- 	STORE  m16sB
           130 : 80C3;  -- 	CALL   Mult16s
           131 : 08EB;  -- 	LOAD   mres16sH
           132 : 6008;  -- 	SHIFT  8
           133 : 1152;  -- 	STORE  L2T2
           134 : 08EA;  -- 	LOAD   mres16sL
           135 : 6018;  -- 	SHIFT  -8        ; / 256
           136 : 4963;  -- 	AND    LoByte
           137 : 5152;  -- 	OR     L2T2
           138 : 1153;  -- 	STORE  L2T3
           139 : 0951;  -- 	LOAD   L2T1
           13A : 10E6;  -- 	STORE  m16sa
           13B : B868;  -- 	LOADI  104       ; min * 104
           13C : 10E7;  -- 	STORE  m16sB
           13D : 80C3;  -- 	CALL   Mult16s
           13E : 08EB;  -- 	LOAD   mres16sH
           13F : 6008;  -- 	SHIFT  8
           140 : 1152;  -- 	STORE  L2T2
           141 : 08EA;  -- 	LOAD   mres16sL
           142 : 6018;  -- 	SHIFT  -8        ; / 256
           143 : 4963;  -- 	AND    LoByte
           144 : 5152;  -- 	OR     L2T2
           145 : 1953;  -- 	ADD    L2T3     ; sum
           146 : 8800;  -- 	RETURN
           147 : 1951;  -- 	ADD    L2T1
           148 : 1152;  -- 	STORE  L2T2
           149 : 0951;  -- 	LOAD   L2T1
           14A : 1153;  -- 	STORE  L2T3
           14B : 0952;  -- 	LOAD   L2T2
           14C : 1151;  -- 	STORE  L2T1
           14D : 0953;  -- 	LOAD   L2T3
           14E : 292D;  -- 	JUMP   CalcDist
           14F : 0000;  -- L2A:  DW 0
           150 : 0000;  -- L2B:  DW 0
           151 : 0000;  -- L2T1: DW 0
           152 : 0000;  -- L2T2: DW 0
           153 : 0000;  -- L2T3: DW 0
           154 : 0000;  -- Temp:      DW 0
           155 : 0000;  -- Pattern:   DW 0
           156 : 0000;  -- Score:     DW 0
           157 : 0000;  -- Zero:      DW 0
           158 : FFFF;  -- NegOne:    DW -1
           159 : 0001;  -- Bit0:      DW &B0000000001
           15A : 0002;  -- Bit1:      DW &B0000000010
           15B : 0004;  -- Bit2:      DW &B0000000100
           15C : 0008;  -- Bit3:      DW &B0000001000
           15D : 0010;  -- Bit4:      DW &B0000010000
           15E : 0020;  -- Bit5:      DW &B0000100000
           15F : 0040;  -- Bit6:      DW &B0001000000
           160 : 0080;  -- Bit7:      DW &B0010000000
           161 : 0100;  -- Bit8:      DW &B0100000000
           162 : 0200;  -- Bit9:      DW &B1000000000
           163 : 00FF;  -- LoByte:    DW &H00FF
           164 : FF00;  -- HiByte:    DW &HFF00
           165 : 203A;  -- I2CWCmd:  DW &H203A    ; write two i2c bytes, addr 0x3A
           166 : 123A;  -- I2CRCmd:  DW &H123A    ; write one byte, read two bytes, addr 0x3A
           167 : 0032;  -- AccXAddr: DW &H32      ; X acceleration register address.
           168 : 0034;  -- AccYAddr: DW &H34      ; X acceleration register address.
           169 : 0006;  -- 	DW 6           ; Number of commands to send
           16A : 3100;  -- 	DW &H3100      ; Dummy transaction to sync I2C bus if needed	
           16B : 3100;  -- 	DW &H3100      ; Dummy transaction to sync I2C bus if needed	
           16C : 3100;  -- 	DW &H3100      ; Right-justified 10-bit data, +/-2 G
           16D : 3800;  -- 	DW &H3800      ; No FIFO
           16E : 2C0A;  -- 	DW &H2C0A      ; 25 samples per second
           16F : 2D08;  -- 	DW &H2D08      ; No sleep
  END;
