library ieee;

use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity Audio is 
	port (
		cs: 			in  std_logic;
		clk: 			in  std_logic;
		resetn: 		in  std_logic;
		input: 		in  std_logic_vector(10 downto 0);
		data: 		in  std_logic_vector(15 downto 0);
		addr: 		out std_logic_vector(15 downto 0);
		rd_en:		out std_logic;
		output: 		out std_logic
	);
end Audio;

architecture rtl of Audio is
	signal latched_input: std_logic_vector(10 downto 0);
	signal changed_input: std_logic;
	signal zero_data: std_logic;
	signal counter: std_logic_vector(14 downto 0);
	signal counts: std_logic_vector(14 downto 0);
	signal repeat: std_logic;
	signal song: std_logic_vector(9 downto 0);
	signal trigger_song_change: std_logic;
--	signal addr_int: std_logic_vector(15 downto 0);
--	signal rd_en_int: std_logic;
begin
	process(resetn, cs, clk, changed_input, zero_data)
	begin
		if (resetn = '0') then
			counter <= (14 downto 0 => '0');
		elsif (cs = '1') then 
			latched_input <= input;
			case song is 
				when "0000000001"	=> addr <= x"0000";
				when "0000000010"	=> addr <= x"0D21";
				when others => addr <= x"FFFF"; 
			end case;
		elsif (zero_data = '0' and repeat = '1') then
			case song is 
				when "0000000001"	=> addr <= x"0000";
				when "0000000010"	=> addr <= x"0D21";
				when others => addr <= x"FFFF"; 
			end case;
		elsif (rising_edge(clk)) then
			if (counter < counts) then
				counter <= counter + 1;
			elsif (zero_data = '0') then
				rd_en <= '1';
				counter <= (14 downto 0 => '0');
			else 
				counter <= counter;
			end if;
		end if;
	end process;
	
	changed_input <= '0' when latched_input = input else '1';
	zero_data <= '1' when data = x"0000" else '0';
	
	trigger_song_change <= '1' when (latched_input /= input or (zero_data = '0' and repeat = '1')) else '0';
	
	counts <= data(14 downto 0);
	output <= data(15);
	repeat <= latched_input(10);
	song <= latched_input(9 downto 0);
	
--	addr <= addr_int;
--	rd_en <= rd_en_int;
end rtl;