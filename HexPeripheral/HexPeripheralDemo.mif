-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    000 : 0833; -- LOAD	clear
    001 : 98e0; -- OUT    	HexPeriph
    002 : b805; -- LOADI	5
    003 : 8042; -- CALL	DelayAC
    004 : 0835; -- LOAD	writePlayer
    005 : 5041; -- OR		rightSide
    006 : 98e0; -- OUT		HexPeriph
    007 : b805; -- LOADI	5
    008 : 8042; -- CALL	DelayAC
    009 : 0835; -- LOAD	writePlayer
    00a : 5040; -- OR		midSide
    00b : 98e0; -- OUT		HexPeriph
    00c : b805; -- LOADI	5
    00d : 8042; -- CALL	DelayAC
    00e : 0834; -- LOAD	writeHex
    00f : 503b; -- OR		Hex5
    010 : 503c; -- OR		leftDef
    011 : 98e0; -- OUT		HexPeriph
    012 : b805; -- LOADI	5
    013 : 8042; -- CALL	DelayAC
    014 : 0834; -- LOAD	writeHex
    015 : 5036; -- OR		Hex0
    016 : 503e; -- OR		rightDef
    017 : 98e0; -- OUT		HexPeriph
    018 : b805; -- LOADI	5
    019 : 8042; -- CALL	DelayAC
    01a : 0834; -- LOAD	writeHex
    01b : 5036; -- OR		Hex0
    01c : 503c; -- OR		leftDef
    01d : 98e0; -- OUT		HexPeriph
    01e : b805; -- LOADI	5
    01f : 8042; -- CALL	DelayAC
    020 : 0834; -- LOAD	writeHex
    021 : 503a; -- OR		Hex4
    022 : 503d; -- OR		midDef
    023 : 98e0; -- OUT		HexPeriph
    024 : b805; -- LOADI	5
    025 : 8042; -- CALL	DelayAC
    026 : 0834; -- LOAD	writeHex
    027 : 5039; -- OR		Hex3
    028 : 503d; -- OR		midDef
    029 : 98e0; -- OUT		HexPeriph
    02a : b805; -- LOADI	5
    02b : 8042; -- CALL	DelayAC
    02c : 0834; -- LOAD	writeHex
    02d : 5037; -- OR		Hex1
    02e : 503e; -- OR		rightDef
    02f : 98e0; -- OUT		HexPeriph
    030 : b805; -- LOADI	5
    031 : 8042; -- CALL	DelayAC
    032 : 2800; -- JUMP   	Test
    033 : 0000; -- clear:			DW &H0000
    034 : 1000; -- writeHex:		DW &H1000
    035 : 2000; -- writePlayer:	DW &H2000
    036 : 0000; -- Hex0:	DW &B0000000000000000
    037 : 0200; -- Hex1:	DW &B0000001000000000
    038 : 0400; -- Hex2:	DW &B0000010000000000
    039 : 0600; -- Hex3:	DW &B0000011000000000
    03a : 0800; -- Hex4:	DW &B0000100000000000
    03b : 0a00; -- Hex5:	DW &B0000101000000000
    03c : 0008; -- leftDef:	DW &B0001000
    03d : 0040; -- midDef:		DW &B1000000
    03e : 0001; -- rightDef:	DW &B0000001
    03f : 0800; -- leftSide:		DW &B0000100000000000
    040 : 0400; -- midSide:		DW &B0000010000000000
    041 : 0200; -- rightSide:		DW &B0000001000000000
    042 : b800; -- LOADI 0
    043 : 6801; -- ADDI 1
    044 : 0000; -- NOP
    045 : 0000; -- NOP
    046 : 0000; -- NOP
    047 : 0000; -- NOP
    048 : 0000; -- NOP
    049 : 0000; -- NOP
    04a : 0000; -- NOP
    04b : 0000; -- NOP
    04c : 0000; -- NOP
    04d : 0000; -- NOP
    04e : 4050; -- JZERO Boop
    04f : 2843; -- JUMP Bruh
    050 : 8800; -- RETURN
    051 : 0009; -- OuterMask:  DW 9
    052 : 0000; -- OuterCount: DW 0
    053 : 3856; -- JPOS   Abs_r
    054 : 5951; -- XOR    NegOne       ; Flip all bits
    055 : 6801; -- ADDI   1            ; Add one (i.e. negate number)
    056 : 8800; -- RETURN
    057 : 08b7; -- LOAD   AtanY
    058 : 8053; -- CALL   Abs          ; abs(y)
    059 : 10b9; -- STORE  AtanT
    05a : 08b6; -- LOAD   AtanX        ; abs(x)
    05b : 8053; -- CALL   Abs
    05c : 20b9; -- SUB    AtanT        ; abs(x) - abs(y)
    05d : 3068; -- JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
    05e : 08b6; -- LOAD   AtanX        ; Octants 1, 4, 5, 8
    05f : 3065; -- JNEG   A2_R3
    060 : 8077; -- CALL   A2_calc      ; Octants 1, 8
    061 : 3063; -- JNEG   A2_R1n
    062 : 8800; -- RETURN              ; Return raw value if in octant 1
    063 : 6968; -- ADDI   360          ; Add 360 if we are in octant 8
    064 : 8800; -- RETURN
    065 : 8077; -- CALL   A2_calc      ; Octants 4, 5
    066 : 68b4; -- ADDI   180          ; theta' = theta + 180
    067 : 8800; -- RETURN
    068 : 08b7; -- LOAD   AtanY        ; Swap input arguments
    069 : 10b9; -- STORE  AtanT
    06a : 08b6; -- LOAD   AtanX
    06b : 10b7; -- STORE  AtanY
    06c : 08b9; -- LOAD   AtanT
    06d : 10b6; -- STORE  AtanX
    06e : 3873; -- JPOS   A2_R2        ; If Y positive, octants 2,3
    06f : 8077; -- CALL   A2_calc      ; else octants 6, 7
    070 : 8054; -- CALL   Neg          ; Negatge the number
    071 : 690e; -- ADDI   270          ; theta' = 270 - theta
    072 : 8800; -- RETURN
    073 : 8077; -- CALL   A2_calc      ; Octants 2, 3
    074 : 8054; -- CALL   Neg          ; negate the angle
    075 : 685a; -- ADDI   90           ; theta' = 90 - theta
    076 : 8800; -- RETURN
    077 : 08b7; -- LOAD   AtanY
    078 : 1116; -- STORE  d16sN        ; Y in numerator
    079 : 08b6; -- LOAD   AtanX
    07a : 1117; -- STORE  d16sD        ; X in denominator
    07b : 80a3; -- CALL   A2_div       ; divide
    07c : 091c; -- LOAD   dres16sQ     ; get the quotient (remainder ignored)
    07d : 10b8; -- STORE  AtanRatio
    07e : 10df; -- STORE  m16sA
    07f : 10e0; -- STORE  m16sB
    080 : 809a; -- CALL   A2_mult      ; X^2
    081 : 10df; -- STORE  m16sA
    082 : 08ba; -- LOAD   A2c
    083 : 10e0; -- STORE  m16sB
    084 : 809a; -- CALL   A2_mult
    085 : 6900; -- ADDI   256          ; 256/256+0.28125X^2
    086 : 1117; -- STORE  d16sD
    087 : 08b8; -- LOAD   AtanRatio
    088 : 1116; -- STORE  d16sN        ; Ratio in numerator
    089 : 80a3; -- CALL   A2_div       ; divide
    08a : 091c; -- LOAD   dres16sQ     ; get the quotient (remainder ignored)
    08b : 10df; -- STORE  m16sA        ; <= result in radians
    08c : 08bb; -- LOAD   A2cd         ; degree conversion factor
    08d : 10e0; -- STORE  m16sB
    08e : 809a; -- CALL   A2_mult      ; convert to degrees
    08f : 10b9; -- STORE  AtanT
    090 : 6017; -- SHIFT  -7           ; check 7th bit
    091 : 4952; -- AND    One
    092 : 4097; -- JZERO  A2_rdwn      ; round down
    093 : 08b9; -- LOAD   AtanT
    094 : 6018; -- SHIFT  -8
    095 : 6801; -- ADDI   1            ; round up
    096 : 8800; -- RETURN
    097 : 08b9; -- LOAD   AtanT
    098 : 6018; -- SHIFT  -8           ; round down
    099 : 8800; -- RETURN
    09a : 80bc; -- CALL   Mult16s
    09b : 08e4; -- LOAD   mres16sH
    09c : 6008; -- SHIFT  8            ; move high word of result up 8 bits
    09d : 10e4; -- STORE  mres16sH
    09e : 08e3; -- LOAD   mres16sL
    09f : 6018; -- SHIFT  -8           ; move low word of result down 8 bits
    0a0 : 495c; -- AND    LoByte
    0a1 : 50e4; -- OR     mres16sH     ; combine high and low words of result
    0a2 : 8800; -- RETURN
    0a3 : b809; -- LOADI  9            ; loop 8 times (256 = 2^8)
    0a4 : 10b9; -- STORE  AtanT
    0a5 : 08b9; -- LOAD   AtanT
    0a6 : 6fff; -- ADDI   -1
    0a7 : 38aa; -- JPOS   A2_DN        ; not done; continue shifting
    0a8 : 80e5; -- CALL   Div16s       ; do the standard division
    0a9 : 8800; -- RETURN
    0aa : 10b9; -- STORE  AtanT
    0ab : 0916; -- LOAD   d16sN        ; start by trying to scale the numerator
    0ac : 6001; -- SHIFT  1
    0ad : 5916; -- XOR    d16sN        ; if the sign changed,
    0ae : 30b2; -- JNEG   A2_DD        ; switch to scaling the denominator
    0af : 5916; -- XOR    d16sN        ; get back shifted version
    0b0 : 1116; -- STORE  d16sN
    0b1 : 28a5; -- JUMP   A2_DL
    0b2 : 0917; -- LOAD   d16sD
    0b3 : 6011; -- SHIFT  -1           ; have to scale denominator
    0b4 : 1117; -- STORE  d16sD
    0b5 : 28a5; -- JUMP   A2_DL
    0b6 : 0000; -- AtanX:      DW 0
    0b7 : 0000; -- AtanY:      DW 0
    0b8 : 0000; -- AtanRatio:  DW 0        ; =y/x
    0b9 : 0000; -- AtanT:      DW 0        ; temporary value
    0ba : 0048; -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
    0bb : 394c; -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
    0bc : b800; -- LOADI  0
    0bd : 10e1; -- STORE  m16sc        ; clear carry
    0be : 10e4; -- STORE  mres16sH     ; clear result
    0bf : b810; -- LOADI  16           ; load 16 to counter
    0c0 : 10e2; -- STORE  mcnt16s
    0c1 : 08e1; -- LOAD   m16sc        ; check the carry (from previous iteration)
    0c2 : 40c6; -- JZERO  Mult16s_noc  ; if no carry, move on
    0c3 : 08e4; -- LOAD   mres16sH     ; if a carry,
    0c4 : 18df; -- ADD    m16sA        ;  add multiplicand to result H
    0c5 : 10e4; -- STORE  mres16sH
    0c6 : 08e0; -- LOAD   m16sB
    0c7 : 4952; -- AND    One          ; check bit 0 of multiplier
    0c8 : 10e1; -- STORE  m16sc        ; save as next carry
    0c9 : 40cd; -- JZERO  Mult16s_sh   ; if no carry, move on to shift
    0ca : 08e4; -- LOAD   mres16sH     ; if bit 0 set,
    0cb : 20df; -- SUB    m16sA        ;  subtract multiplicand from result H
    0cc : 10e4; -- STORE  mres16sH
    0cd : 08e0; -- LOAD   m16sB
    0ce : 6011; -- SHIFT  -1           ; shift result L >>1
    0cf : 48de; -- AND    c7FFF        ; clear msb
    0d0 : 10e0; -- STORE  m16sB
    0d1 : 08e4; -- LOAD   mres16sH     ; load result H
    0d2 : 600f; -- SHIFT  15           ; move lsb to msb
    0d3 : 50e0; -- OR     m16sB
    0d4 : 10e0; -- STORE  m16sB        ; result L now includes carry out from H
    0d5 : 08e4; -- LOAD   mres16sH
    0d6 : 6011; -- SHIFT  -1
    0d7 : 10e4; -- STORE  mres16sH     ; shift result H >>1
    0d8 : 08e2; -- LOAD   mcnt16s
    0d9 : 6fff; -- ADDI   -1           ; check counter
    0da : 38c0; -- JPOS   Mult16s_loop ; need to iterate 16 times
    0db : 08e0; -- LOAD   m16sB
    0dc : 10e3; -- STORE  mres16sL     ; multiplier and result L shared a word
    0dd : 8800; -- RETURN              ; Done
    0de : 7fff; -- c7FFF: DW &H7FFF
    0df : 0000; -- m16sA: DW 0 ; multiplicand
    0e0 : 0000; -- m16sB: DW 0 ; multipler
    0e1 : 0000; -- m16sc: DW 0 ; carry
    0e2 : 0000; -- mcnt16s: DW 0 ; counter
    0e3 : 0000; -- mres16sL: DW 0 ; result low
    0e4 : 0000; -- mres16sH: DW 0 ; result high
    0e5 : b800; -- LOADI  0
    0e6 : 111d; -- STORE  dres16sR     ; clear remainder result
    0e7 : 111a; -- STORE  d16sC1       ; clear carry
    0e8 : 0916; -- LOAD   d16sN
    0e9 : 5917; -- XOR    d16sD
    0ea : 1118; -- STORE  d16sS        ; sign determination = N XOR D
    0eb : b811; -- LOADI  17
    0ec : 1119; -- STORE  d16sT        ; preload counter with 17 (16+1)
    0ed : 0917; -- LOAD   d16sD
    0ee : 8053; -- CALL   Abs          ; take absolute value of denominator
    0ef : 1117; -- STORE  d16sD
    0f0 : 0916; -- LOAD   d16sN
    0f1 : 8053; -- CALL   Abs          ; take absolute value of numerator
    0f2 : 1116; -- STORE  d16sN
    0f3 : 0916; -- LOAD   d16sN
    0f4 : 601f; -- SHIFT  -15          ; get msb
    0f5 : 4952; -- AND    One          ; only msb (because shift is arithmetic)
    0f6 : 111b; -- STORE  d16sC2       ; store as carry
    0f7 : 0916; -- LOAD   d16sN
    0f8 : 6001; -- SHIFT  1            ; shift <<1
    0f9 : 511a; -- OR     d16sC1       ; with carry
    0fa : 1116; -- STORE  d16sN
    0fb : 0919; -- LOAD   d16sT
    0fc : 6fff; -- ADDI   -1           ; decrement counter
    0fd : 410d; -- JZERO  Div16s_sign  ; if finished looping, finalize result
    0fe : 1119; -- STORE  d16sT
    0ff : 091d; -- LOAD   dres16sR
    100 : 6001; -- SHIFT  1            ; shift remainder
    101 : 511b; -- OR     d16sC2       ; with carry from other shift
    102 : 2117; -- SUB    d16sD        ; subtract denominator from remainder
    103 : 3108; -- JNEG   Div16s_add   ; if negative, need to add it back
    104 : 111d; -- STORE  dres16sR
    105 : b801; -- LOADI  1
    106 : 111a; -- STORE  d16sC1       ; set carry
    107 : 28f3; -- JUMP   Div16s_loop
    108 : 1917; -- ADD    d16sD        ; add denominator back in
    109 : 111d; -- STORE  dres16sR
    10a : b800; -- LOADI  0
    10b : 111a; -- STORE  d16sC1       ; clear carry
    10c : 28f3; -- JUMP   Div16s_loop
    10d : 0916; -- LOAD   d16sN
    10e : 111c; -- STORE  dres16sQ     ; numerator was used to hold quotient result
    10f : 0918; -- LOAD   d16sS        ; check the sign indicator
    110 : 3112; -- JNEG   Div16s_neg
    111 : 8800; -- RETURN
    112 : 091c; -- LOAD   dres16sQ     ; need to negate the result
    113 : 8054; -- CALL   Neg
    114 : 111c; -- STORE  dres16sQ
    115 : 8800; -- RETURN
    116 : 0000; -- d16sN: DW 0 ; numerator
    117 : 0000; -- d16sD: DW 0 ; denominator
    118 : 0000; -- d16sS: DW 0 ; sign value
    119 : 0000; -- d16sT: DW 0 ; temp counter
    11a : 0000; -- d16sC1: DW 0 ; carry value
    11b : 0000; -- d16sC2: DW 0 ; carry value
    11c : 0000; -- dres16sQ: DW 0 ; quotient result
    11d : 0000; -- dres16sR: DW 0 ; remainder result
    11e : 0948; -- LOAD   L2A
    11f : 8053; -- CALL   Abs
    120 : 114a; -- STORE  L2T1
    121 : 0949; -- LOAD   L2B
    122 : 8053; -- CALL   Abs
    123 : 214a; -- SUB    L2T1
    124 : 3140; -- JNEG   GDSwap    ; swap if needed to get largest value in X
    125 : 194a; -- ADD    L2T1
    126 : 10df; -- STORE  m16sa
    127 : b8f6; -- LOADI  246       ; max * 246
    128 : 10e0; -- STORE  m16sB
    129 : 80bc; -- CALL   Mult16s
    12a : 08e4; -- LOAD   mres16sH
    12b : 6008; -- SHIFT  8
    12c : 114b; -- STORE  L2T2
    12d : 08e3; -- LOAD   mres16sL
    12e : 6018; -- SHIFT  -8        ; / 256
    12f : 495c; -- AND    LoByte
    130 : 514b; -- OR     L2T2
    131 : 114c; -- STORE  L2T3
    132 : 094a; -- LOAD   L2T1
    133 : 10df; -- STORE  m16sa
    134 : b868; -- LOADI  104       ; min * 104
    135 : 10e0; -- STORE  m16sB
    136 : 80bc; -- CALL   Mult16s
    137 : 08e4; -- LOAD   mres16sH
    138 : 6008; -- SHIFT  8
    139 : 114b; -- STORE  L2T2
    13a : 08e3; -- LOAD   mres16sL
    13b : 6018; -- SHIFT  -8        ; / 256
    13c : 495c; -- AND    LoByte
    13d : 514b; -- OR     L2T2
    13e : 194c; -- ADD    L2T3     ; sum
    13f : 8800; -- RETURN
    140 : 194a; -- ADD    L2T1
    141 : 114b; -- STORE  L2T2
    142 : 094a; -- LOAD   L2T1
    143 : 114c; -- STORE  L2T3
    144 : 094b; -- LOAD   L2T2
    145 : 114a; -- STORE  L2T1
    146 : 094c; -- LOAD   L2T3
    147 : 2926; -- JUMP   CalcDist
    148 : 0000; -- L2A:  DW 0
    149 : 0000; -- L2B:  DW 0
    14a : 0000; -- L2T1: DW 0
    14b : 0000; -- L2T2: DW 0
    14c : 0000; -- L2T3: DW 0
    14d : 0000; -- Temp:      DW 0
    14e : 0000; -- Pattern:   DW 0
    14f : 0000; -- Score:     DW 0
    150 : 0000; -- Zero:      DW 0
    151 : ffff; -- NegOne:    DW -1
    152 : 0001; -- Bit0:      DW &B0000000001
    153 : 0002; -- Bit1:      DW &B0000000010
    154 : 0004; -- Bit2:      DW &B0000000100
    155 : 0008; -- Bit3:      DW &B0000001000
    156 : 0010; -- Bit4:      DW &B0000010000
    157 : 0020; -- Bit5:      DW &B0000100000
    158 : 0040; -- Bit6:      DW &B0001000000
    159 : 0080; -- Bit7:      DW &B0010000000
    15a : 0100; -- Bit8:      DW &B0100000000
    15b : 0200; -- Bit9:      DW &B1000000000
    15c : 00ff; -- LoByte:    DW &H00FF
    15d : ff00; -- HiByte:    DW &HFF00
    15e : 203a; -- I2CWCmd:  DW &H203A    ; write two i2c bytes, addr 0x3A
    15f : 123a; -- I2CRCmd:  DW &H123A    ; write one byte, read two bytes, addr 0x3A
    160 : 0032; -- AccXAddr: DW &H32      ; X acceleration register address.
    161 : 0034; -- AccYAddr: DW &H34      ; X acceleration register address.
    162 : 0006; -- DW 6           ; Number of commands to send
    163 : 3100; -- DW &H3100      ; Dummy transaction to sync I2C bus if needed
    164 : 3100; -- DW &H3100      ; Dummy transaction to sync I2C bus if needed
    165 : 3100; -- DW &H3100      ; Right-justified 10-bit data, +/-2 G
    166 : 3800; -- DW &H3800      ; No FIFO
    167 : 2c0a; -- DW &H2C0A      ; 25 samples per second
    168 : 2d08; -- DW &H2D08      ; No sleep

    [169..7ff] : 0000; -- Empty memory

  END;
